#!/usr/bin/env bash
# Install dependencies and build Emacs

set -euo pipefail
IFS=$'\n\t'

print_help() {
  cat <<EOF
setup - Set up the emacs environment

usage: ./setup [ TASK ]

  Where TASK is one of:

  all    Run deps and build tasks

  build  Build Emacs and modules

  deps   Install and update OS dependencies

EOF
}

base="$HOME/.emacs.d/src"

required=(autoconf
          texinfo
          libxml2
          imagemagick
          librsvg
          gnutls
          gnupg
          jansson
          cairo
          libvterm)
required_casks=(mactex)

configure_opts=(--without-pop
                --with-ns
                --disable-ns-self-contained
                --with-cairo
                --with-imagemagick
                --with-modules
                --program-transform-name='s/^ctags$/ctags.emacs/'
                CFLAGS='-Ofast -march=native -pipe -falign-functions=64 -fomit-frame-pointer -funit-at-a-time -fforce-addr -mfpmath=sse -ffast-math -fno-finite-math-only -fstack-check -I /usr/local/opt/libxml2/include/libxml2')

heading() {
  printf "\033[38;5;013m %s  \033[0m  \n" "$*"
}

contains() {
	local e match="$1"
	shift
	for e in "$@"; do [ "$e" = "$match" ] && return 0; done
	return 1
}

# Ensure the given homebrew packages are installed and up to date
# brew_ensure [ cask ] dep1 [ dep2 ] [ ... ]
brew_ensure() {
  local prefix required missing outdated upgrade
  # Decide if we are operating on 'brew' or 'brew cask'
  prefix="brew "
  [ "$1" = "cask" ] && prefix="${prefix}cask " && shift

  # Get list of missing packages, install them
  readarray -t installed < <(eval $prefix list -1)
  required=("$@")
  missing=()
  for p in "${required[@]}"; do
	  contains "$p" "${installed[@]}" || missing+=("$p")
  done
  if [ -n "${missing[*]}" ]; then
	  echo "Installing packages: ${missing[*]}"
	  eval $prefix install "${missing[@]}"
  fi

  # Get list of outdated packages, upgrade them
  outdated="$(eval $prefix outdated | awk '{print $1}')"
  upgrade=()
  for p in "${required[@]}"; do
	  contains "$p" "${outdated[@]}" && upgrade+=("$p")
  done
  if [ -n "${upgrade[*]}" ]; then
	  echo "Upgrading packages: ${upgrade[*]}"
	  eval $prefix upgrade "${upgrade[@]}"
  fi
}

install_deps() {
  heading "Installing Dependencies..."

  brew_ensure "${required[@]}"
  brew_ensure cask "${required_casks[@]}"
  brew install --HEAD universal-ctags/universal-ctags/universal-ctags
}

build_emacs() {
  heading "Building Emacs..."

  mkdir -p "$base"
  pushd "$base"

  [ -d "./emacs" ] || git clone "https://git.savannah.gnu.org/git/emacs.git"
  pushd "./emacs"

  git pull
  # git reset HEAD --hard
  ./autogen.sh
  # The ctags bit is to rename the ctags binary so it doesn't conflict with an
  # existing, non-emacs ctags installation
  ./configure "${configure_opts[@]}"
  # ./configure --without-dbus --without-pop --with-gnutls --with-ns --disable-ns-self-contained --with-rsvg --with-imagemagick --with-json --with-xml2 --with-modules CFLAGS='-Ofast -march=native -pipe -falign-functions=64 -fomit-frame-pointer -funit-at-a-time -fforce-addr -mfpmath=sse -ffast-math -fno-finite-math-only -fstack-check -I /usr/local/opt/libxml2/include/libxml2' --program-transform-name='s/^ctags$/ctags.emacs/'
  # Even though we move the binary ourselves, we still need to install to get the
  # Emacs Lisp source in the right place.
  make

  heading "Installing Emacs..."
  make install
  rm -rf "$HOME/Applications/Emacs.app"
  mv nextstep/Emacs.app "$HOME/Applications/"

  popd
}

case "${1:-}" in
  d*) install_deps ;;
  b*|e*) build_emacs ;;
  h*) print_help ;;
  *) install_deps && build_emacs ;;
esac

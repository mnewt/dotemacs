#!/usr/bin/env bash
# Install dependencies and build Emacs

set -euo pipefail
IFS=$'\n\t'

print_help() {
  cat <<EOF
setup - Set up the emacs environment

usage: ./setup [ TASK ]

  Where TASK is one of:

  all    Run deps and build tasks (default)

  emacs  Build Emacs and modules

  deps   Install and update OS dependencies

EOF
}

base="$HOME/.emacs.d/src"

required=(
  autoconf
  cmake
  texinfo
  libxml2
  imagemagick
  librsvg
  gnutls
  gnupg
  jansson
  cairo
  libvterm)
required_casks=(mactex)

# The ctags bit is to rename the ctags binary so it doesn't conflict with an
# existing, non-emacs ctags installation
configure_opts=(
  --config-cache
  --without-pop
  --with-ns
  --disable-ns-self-contained
  --with-cairo
  --with-imagemagick
  --with-modules
  --program-transform-name='s/^ctags$/ctags.emacs/'
  CFLAGS='-Ofast -march=native -pipe -falign-functions=64 -fomit-frame-pointer -funit-at-a-time -fforce-addr -mfpmath=sse -ffast-math -fno-finite-math-only -fstack-check -I/usr/local/opt/libxml2/include/libxml2'
  PKG_CONFIG_PATH="PKG_CONFIG_PATH:/usr/local/opt/gnutls/lib/pkgconfig:/usr/local/opt/nettle/lib/pkgconfig:/usr/local/opt/libtasn1/lib/pkgconfig:/usr/local/opt/p11-kit/lib/pkgconfig"
)

heading() {
  printf "\033[38;5;013m %s  \033[0m  \n" "$*"
}

contains() {
  local e match="$1"
  shift
  for e in "$@"; do [ "$e" = "$match" ] && return 0; done
  return 1
}

# Ensure the directory to which we will install Emacs exists and has the correct
# permissions set.
ensure_install_directory() {
  local libexec=/usr/local/libexec/emacs
  if [ ! -d $libexec ]; then
    sudo mkdir -p $libexec
    chown $USER $libexec
  fi
}

# Ensure the given homebrew packages are installed and up to date
# brew_ensure [ cask ] dep1 [ dep2 ] [ ... ]
brew_ensure() {
  local prefix required missing outdated upgrade
  # Decide if we are operating on 'brew' or 'brew cask'
  prefix="brew "
  [ "$1" = "cask" ] && prefix="${prefix}cask " && shift

  # Get list of missing packages, install them
  installed=($(eval $prefix list -1))
  required=("$@")
  for p in "${required[@]}"; do
    contains "$p" "${installed[@]}" || missing+=("$p")
  done
  if [ -n "${missing[*]:-}" ]; then
    echo "Installing packages: ${missing[*]}"
    eval $prefix install "${missing[@]}"
  fi

  # Get list of outdated packages, upgrade them
  outdated="$(eval $prefix outdated | awk '{print $1}')"
  upgrade=()
  for p in "${required[@]}"; do
    contains "$p" "${outdated[@]}" && upgrade+=("$p")
  done
  if [ -n "${upgrade[*]:-}" ]; then
    echo "Upgrading packages: ${upgrade[*]}"
    eval $prefix upgrade "${upgrade[@]}"
  fi
}

install_deps() {
  heading "Installing Dependencies..."

  brew_ensure "${required[@]}"
  brew_ensure cask "${required_casks[@]}"
  brew install --HEAD universal-ctags/universal-ctags/universal-ctags

  # Apparently gnutls is bottled now.
  which gnutls || PATH="$(brew --prefix gnutls):$PATH"
}

how_many_cores() {
  case "$(uname)" in
  Darwin)
    sysctl -n hw.ncpu
    ;;
  Linux)
    awk '/^processor/ {++n} END {print n}' /proc/cpuinfo
    ;;
  esac
}

build_emacs() {
  heading "Building Emacs..."

  ensure_install_directory

  mkdir -p "$base"
  pushd "$base"

  [ -d "$base/emacs" ] || git clone "https://git.savannah.gnu.org/git/emacs.git"
  pushd "$base/emacs"

  git pull
  ./autogen.sh
  ./configure "${configure_opts[@]}"
  make -j "$(how_many_cores)"

  heading "Installing Emacs..."
  # Even though we move the binary ourselves, we still need to install to get the
  # Emacs Lisp and C source files in the right place.
  make -j "$(how_many_cores)" install
  rm -rf "$HOME/Applications/Emacs.app"
  mv nextstep/Emacs.app "$HOME/Applications/"

  popd
}

case "${1:-}" in
d*) install_deps ;;
b* | e*) build_emacs ;;
h*) print_help ;;
*) install_deps && build_emacs ;;
esac
